if [[ -r "{{ .path.xdg.cache }}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "{{ .path.xdg.cache }}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

[[ ! -f $HOME/.p10k.zsh ]] || source $HOME/.p10k.zsh

# set environment variables
source $ZSH_CONFIG/path.zsh
source $ZSH_CONFIG/aliases.zsh

source $ZSH_CONFIG/load-plugins.zsh

# linux-specific
export GTK_THEME=Adwaita:dark
export QT_STYLE_OVERRIDE=Adwaita-Dark

# zstyle ':completion:*' completer _complete _ignored
# zstyle :compinstall filename '/home/erik/.zshrc'
#
#
#
#
#
#
# cache the generation of completions
source $ZSH_CONFIG/compinit.zsh

#
#
#
#
#
#
#



# completion types
zstyle ':completion:*' completer _extensions _complete

# jump directly to first completion
zstyle ':completion:::::default' menu yes select

# matching
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[.+-]=* r:|=*' 'l:|=* r:|=*'

# allow highlight/menu move in completions
zstyle ':completion:*' menu select

# styles
zstyle ':completion:*:*:*:*:descriptions' format '%F{green}// %d%f'
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}// %d%f'
zstyle ':completion:*:messages' format '%F{purple}// %d%f'
zstyle ':completion:*:warnings' format '%F{red}// no completions availible%f'

# group results under headers
zstyle ':completion:*' group-name ''
zstyle ':completion:*:*:-command-:*:*' group-order alias builtins functions commands

# file colors
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# use --help completions when availible
compdef _gnu_generic -default- -P '*'
#
#
#
#
#
#
#
# 

HISTSIZE=9999999 # Lines of history to keep in memory for current session
HISTFILESIZE=9999999 # Number of commands to save in the file
SAVEHIST=9999999 # Number of history entries to save to disk
HISTFILE=$HOME/.zsh_history # Where to save history to disk
HISTDUP=erase # Erase duplicates in the history file

setopt hist_ignore_dups # Ignore duplicates
setopt append_history # Append history to the history file (no overwriting)
setopt share_history # Share history across terminals
setopt inc_append_history # Immediately append to the history file, not just when a term is killed
setopt extended_glob # Use extended globbing syntax
setopt HIST_IGNORE_SPACE # Prefix a command with space to exclude it from history

# reclaim ^S & ^Q
unsetopt flow_control

# vim mode
bindkey -v

### clipboard (zsh-system-clipboard)
# xcc - xclip
# pb - pbcopy/pbpaste
# wlc - wl-copy/wl-paste
{{- $zsh_system_clipboard_method := "" }}
# {- if env "WAYLAND_DISPLAY" }
#   {- $zsh_system_clipboard_method = "wlc"}
# {- else if env "DISPLAY"}
#   {- $zsh_system_clipboard_method = "xcc"}
# {- end}

{{- if eq .host.distro.family "linux" }}
  {{- if eq (env "XDG_SESSION_TYPE") "wayland" }}
    {{- $zsh_system_clipboard_method = "wlc" }}
  {{- else if eq (env "XDG_SESSION_TYPE") "x11" }}
    {{- $zsh_system_clipboard_method = "xcc" }}
  {{- end }}
{{- else if eq .host.distro.family "darwin" }}
  {{- $zsh_system_clipboard_method = "pb" }}
{{- end }}

{{- if $zsh_system_clipboard_method }}
export ZSH_SYSTEM_CLIPBOARD_METHOD={{ $zsh_system_clipboard_method }}
{{- end }}

source $ZSH_CONFIG/fzf.zsh
source $ZSH_CONFIG/extensions/fzf-git.sh

# SSH agent and 1Password handling
if [[ -n "$SSH_TTY" ]] || [[ -n "$TMUX" ]]; then
  # in SSH session or in tmux - use the persistent symlink if it exists
  # note: this symlink is created by `.ssh/rc`
  # if [[ -S "$HOME/.ssh/ssh_auth_sock" ]]; then
  #   export SSH_AUTH_SOCK="$HOME/.ssh/ssh_auth_sock"
  # fi
  # if we're in SSH but the symlink doesn't exist yet, 
  # keep the original SSH_AUTH_SOCK value
else
  # Not in SSH or tmux - use 1Password
  export SSH_AUTH_SOCK="$HOME/.1password/agent.sock"
fi

# auto update environment when running in tmux
TRAPUSR1() {
    local -a envs
    local env
    if [[ -o interactive && -n "$TMUX" ]]; then
        echo "[tmux] updating environment after reattach"
        envs=("${(@f)$(tmux show-environment 2>/dev/null)}")
        for env in $envs; do
            if [[ "$env" = "-"* ]]; then
                unset "${env:1}"
            else
                export "$env"
            fi
        done
    fi
}

# 1password - load plugin
source $XDG_CONFIG_HOME/op/plugins.sh

# 1password-cli - load completions
eval "$(op completion zsh)"; compdef _op op

# reload waybar
alias rlwb="pkill waybar && hyprctl dispatch exec waybar"

# atuin
eval "$(atuin init zsh)"

# zoxide
eval "$(zoxide init zsh)"

# fnm
eval "$(fnm env --use-on-cd --corepack-enabled --version-file-strategy recursive)"
eval "$(fnm completions --shell zsh)"

# tailscale
eval "$(tailscale completion zsh)"

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

# mise
eval "$(mise activate zsh)"

# starship prompt
# type starship_zle-keymap-select >/dev/null || \
#   {
#     echo "Load starship"
#     eval "$(starship completions zsh)"
#     eval "$(starship init zsh)"
#   }

